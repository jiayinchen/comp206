#! /bin/bash
#Every programmer when developing a new project has techniques they would like to standardize.
#These techniques represent best practices they have learned over the years. This question asks
#you to write a Bash script that incorporates some of these common practices. The engineering
#practices in question are the project's directory structure and a script that helps when compiling.
#Create a Bash script called NewProject that does the following when executed:
#• It's command-line syntax is: NewProject path project_name
#◦ The user must type in the project's name and path as the command-line arguments to
#the script. These two parameters are separated by a space. In other words
#$0=NewProject $1=path $2=project_name. The user must enter NewProject and the
#user provides their own values for the parameters path and project_name.
#◦ If the project name argument is missing then an error message is displayed saying
#“Project name is missing. Type in: NewProject path project_name”. The script then
#terminates.
#◦ The path is optional. If the user provided a path then the path must be a standard Unix
#path name. If the path is malformed then the following error message is displayed:
#“Your path name is malformed. Type in: NewProject path project_name”. The script
#then terminates. A malformed path means that it cannot be used to express a path.
#◦ The project name must be one word.
#• The script uses the project name to create a sub-directory based on the path provided. If
#no path was provided then the directory is created within the current directory. The
#created sub-directory's name is the same as the project name.
#• Within that sub-directory the script constructs a best practice directory structure.
#Specifically in creates the following sub-directories below the project name directory:
#docs, source, backup, and archive.
#• Finally, within the newly created project's source directory, NewProject will generate
#(write) it's own compiling script called compile! The user will then be able to use that
#compiling script while working on their C projects! This is how you should build that
#compiling script. Note, you are not copying a file from another location. You are
#generating the script from programming statements contained within the NewProject
#script.
#◦ Hint: echo “some text” >> filename will append “some text” to the
#given file name. If the text is a Bash instruction then you've added that to the text file.
#An entire script can be created this way from within a Bash program!
#◦ You will need to chmod the compile script you generated to make it executable. Do
#this also from NewProject.
#◦ The compiling script's command-line syntax is:
#compile -o executable_name file_name(s)
#▪ The name of the generated script is compile.
#▪ It has on optional switch -o that is paired with an argument called
#executable_name in the example above. The user will provide their own name for
#executable_name at the command-line (through the positional variables).
#• Your compile script uses the gcc command. The -o executable will be used as
#the gcc -o output_file_name (as seen in class).
#• If the user did not provide a -o switch for the script then your gcc command
#must produce an a.out file.
#▪ The last argument is called file_name(s) and represents a list of space separated C
#source file names. There can be one or more (any number actually). If there are
#none, then an error message is displayed:
#“You are missing file names. Type in: compile -o executable_name file_name(s)”.
#▪ The compile script will do the following when compiling: (1) before it compiles it
#will copy all the source file(s) into the backup sub-director. (2) Then, it will use
#gcc and optionally the -o switch to compile the program. But it will redirect the
#errors into a text file called errors, overwriting (without prompt) any previous text
#file with that same name. (3) The script ends by using “more” to view the error
#file.

############################################Question 1###############################################
#if there are only 2 arg(the newProject and the first argument) (so there is no path), only check for project name

#
echo $0 $1 $2 $3
##If there is only 1 argument, then it must be the name
if [ "$#" -eq 1 ]
then
        fName=$1
        fPath="./"
        #echo "you only have $fName"

##if there are 2 arguments, then $0=path and $1=file_name
elif [ "$#" -eq 2 ]
then
        #check if path is malformed (check if it exists)
        if [ ! -d "$1" ]
        then
                echo "Your path name is malformed. Type in: NewProject path file_name"
                exit 1
        fi
        fName=$2
        fPath=$1
        #echo "you should have name $fName  and path $fPath "
##for any other number of arguments --> error, project_name missing or name has 2+ words
else
        echo "Project name is missing. Type in: NewProject path project_name"
fi

#echo "$fName "

#make the directory
#if we didn't provide the path --> then they use the current directory
#b/c we initialized fPath as ./
mkdir "$fPath$fName"
#go into that directory
cd $fName
#create the subdirectories source, docs, backup,archive
mkdir {source,docs,backup,archive}
#go into source
cd source

echo "#! /bin/bash" >> compile
#change  who can use it
chmod ugo=wrx compile
#will all the source files into the backup sub-director
#since we want customized path, use variables and ""(interprets what is between the wuote) instead of ''
echo 'cp $PWD/../source/* $PWD/../backup/' >> compile


#compiling scrip command-line syntax is "compile -o executable_name file_names"
#if they have the -o command: set executableName= $2
echo 'if [ $1 == "-o" ] ' >> compile
echo 'then' >> compile
echo '        executabaleName=$2 ' >> compile
#if there is only 2 variables, then there is no file_name ---> print error message
echo '        if [ $# -eq 2 ] ' >>compile
echo '        then' >> compile
echo '                echo "You are mising file names. Type in: compile -o executable_name file_name(s)"' >> compile
echo '        fi' >> compile
#compile into name given by user
echo '        gcc $executableName $@ 2>errors' >> compile
#if there is no -o, then assume they are all file names and gcc them as a.out file
echo 'else' >> compile
echo '        gcc $@ 2> errors' >> compile
echo 'fi' >> compile
#3
echo 'more errors' >> compile

